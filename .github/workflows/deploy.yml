name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout el código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configura Java y Maven
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Construye la aplicación
      - name: Build Spring Boot App
        run: mvn clean package -DskipTests

      - name: Verificar archivo generado
        run: ls -la target/

      # 4. Construye la imagen Docker con variables inyectadas
      - name: Build Docker Image
        run: |
          docker build --build-arg DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
                       --build-arg DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
                       -t ajustadoati/calch-be:latest .

      # 5. Publica la imagen en Docker Hub
      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ajustadoati/calch-be:latest

      # 6. Despliega en el servidor automáticamente
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ajustado@ajustadoati.com << 'EOF'
          docker pull ajustadoati/calch-be:latest
          docker stop app || true
          docker rm app || true
          docker run -d --name app -p 8083:8080 \
            -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
            -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            ajustadoati/calch-be:latest
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
